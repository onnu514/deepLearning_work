알고리즘과 자료구조 기초

1. 알고리즘의 정의
알고리즘은 문제를 해결하기 위한 명확하고 유한한 단계들의 집합입니다. 
효율적인 알고리즘은 시간복잡도와 공간복잡도를 고려하여 설계됩니다.

2. 시간복잡도 분석
- O(1): 상수 시간 - 배열 접근
- O(log n): 로그 시간 - 이진 탐색
- O(n): 선형 시간 - 순차 탐색
- O(n log n): 선형 로그 시간 - 병합 정렬
- O(n²): 이차 시간 - 버블 정렬
- O(2^n): 지수 시간 - 피보나치 재귀

3. 기본 자료구조
배열(Array)은 연속된 메모리 공간에 데이터를 저장하는 자료구조입니다.
연결리스트(Linked List)는 노드들이 포인터로 연결된 자료구조입니다.
스택(Stack)은 LIFO(Last In First Out) 원리로 동작합니다.
큐(Queue)는 FIFO(First In First Out) 원리로 동작합니다.

4. 정렬 알고리즘
버블 정렬은 인접한 원소들을 비교하여 정렬하는 간단한 알고리즘입니다.
선택 정렬은 최솟값을 찾아 앞쪽부터 정렬하는 방법입니다.
삽입 정렬은 원소를 적절한 위치에 삽입하여 정렬합니다.
퀵 정렬은 분할 정복 알고리즘으로 평균 O(n log n)의 시간복잡도를 가집니다.
병합 정렬은 안정 정렬로 최악의 경우에도 O(n log n)을 보장합니다.

5. 탐색 알고리즘
순차 탐색은 처음부터 끝까지 차례대로 탐색하는 방법입니다.
이진 탐색은 정렬된 배열에서 중간값과 비교하여 범위를 좁혀가는 방법입니다.
해시 테이블은 키-값 쌍을 저장하여 평균 O(1) 시간에 접근할 수 있습니다.

6. 그래프 알고리즘
그래프는 정점(Vertex)과 간선(Edge)으로 구성된 자료구조입니다.
DFS(깊이 우선 탐색)는 스택을 사용하여 깊게 탐색합니다.
BFS(너비 우선 탐색)는 큐를 사용하여 넓게 탐색합니다.
다익스트라 알고리즘은 최단 경로를 찾는 알고리즘입니다.

7. 동적 프로그래밍
동적 프로그래밍은 큰 문제를 작은 문제로 나누어 해결하는 방법입니다.
메모이제이션을 통해 중복 계산을 방지합니다.
피보나치 수열, 배낭 문제 등에 활용됩니다.

8. 그리디 알고리즘
그리디 알고리즘은 각 단계에서 최적의 선택을 하는 방법입니다.
항상 최적해를 보장하지는 않지만 효율적입니다.
활동 선택 문제, 최소 신장 트리 등에 적용됩니다.

9. 트리 자료구조
이진 트리는 각 노드가 최대 두 개의 자식을 가지는 트리입니다.
이진 탐색 트리는 왼쪽 자식 < 부모 < 오른쪽 자식의 성질을 가집니다.
AVL 트리는 균형을 유지하는 이진 탐색 트리입니다.
힙은 완전 이진 트리로 우선순위 큐를 구현하는데 사용됩니다.

10. 알고리즘 설계 기법
분할 정복: 문제를 작은 부분으로 나누어 해결
동적 프로그래밍: 중복 부분 문제를 메모이제이션으로 해결
그리디: 각 단계에서 최적 선택
백트래킹: 가능한 모든 해를 탐색하되 불가능한 경우 되돌아감
